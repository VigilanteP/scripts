
#!/usr/sbin/nft -f
flush ruleset

define home_iface = "vmbr0"
define wg_iface = "wg0"
define wg_port = 55666
define home_subnet = 192.168.1.0/24

define local_exposed_hosts = {
  192.168.1.2  . 53, # pihole
  192.168.1.10 . 8006,  # pve
  192.168.1.20 . 8096,  # embz
  192.168.1.20 . 11434, # embz
  192.168.1.96 . 8096,  # emby
  192.168.1.53 . 5000,  # ombi
  192.168.1.63 . 5055,  # overseerr
  192.168.1.75 . 32400, # plex
  192.168.1.78 . 3001   # mind
}

table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;

        # accept all loopback packets
        iif "lo" accept
        # accept all icmp/icmpv6 packets
        meta l4proto { icmp, ipv6-icmp } accept
        # accept all packets that are part of an already-established connection
        ct state vmap { invalid : drop, established : accept, related : accept }
        # drop new connections over rate limit
        ct state new limit rate over 1/second burst 10 packets drop

        # accept all DHCPv6 packets received at a link-local address
        ip6 daddr fe80::/64 udp dport dhcpv6-client accept

        # accept all SSH packets received on the wireguard interface
        iifname $wg_iface tcp dport ssh accept

        # Process incoming traffic from LAN (whitelisted the subnet for now @ 192.168.1.0/24)
        ip saddr $home_subnet accept

        # Let in traffic via wireguard for webUI (8006) and speedtest (6666)
        iif $wg_iface tcp dport { 6666, 8006 } accept

        # accept all WireGuard packets received on a public interface
        iif $home_iface udp dport $wg_port accept

        # reject with polite "port unreachable" icmp response
        log prefix "[nftables] inpet-reject: " counter reject with icmpx type host-unreachable
        #reject with icmpx type host-unreachable
    }
    chain wg-forward {
        # forward all icmp/icmpv6 packets
        meta l4proto { icmp, ipv6-icmp } accept

        # forward all packets that are part of an already-established connection
        ct state vmap { invalid : drop, established : accept, related : accept }

        # forward DNS requests (UDP 53) to the router
        oifname $home_iface ip daddr 192.168.1.1 udp dport 53 accept
        oifname $home_iface ip daddr 192.168.1.1 tcp dport 53 accept

        # accept packets from wireguard destined for the outside
        oifname $home_iface ip daddr . tcp dport $local_exposed_hosts accept

        # reject with polite "administratively prohibited" icmp response
        reject with icmpx type admin-prohibited
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        ct state established,related accept
        iifname $wg_iface goto wg-forward # log prefix "[nftables] forward-wg0"

        # reject with polite "host unreachable" icmp response
        log prefix "[nftables] forward-reject: " counter reject with icmpx type host-unreachable
        #reject with icmpx type host-unreachable
    }
}
table inet nat {
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # masquerade all packets from WireGuard VPN to LAN
        iifname $wg_iface oif $home_iface masquerade
    }
}
